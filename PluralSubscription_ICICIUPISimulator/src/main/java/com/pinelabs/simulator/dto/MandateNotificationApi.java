
package com.pinelabs.simulator.dto;

import java.util.HashMap;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Mandate Notification API Request
 * <p>
 * Mandate Notification API Request JSON
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "merchantId",
    "subMerchantId",
    "terminalId",
    "merchantName",
    "subMerchantName",
    "payerVa",
    "amount",
    "note",
    "executionDate",
    "mandateSeqNo",
    "merchantTranId",
    "key",
    "value"
})
public class MandateNotificationApi {

    /**
     * Merchant Identification Number
     * (Required)
     * 
     */
    @JsonProperty("merchantId")
    @JsonPropertyDescription("Merchant Identification Number")
    @NotNull
    private Integer merchantId;
    /**
     * Sub Merchant Identification Number of Merchant 
     * (Required)
     * 
     */
    @JsonProperty("subMerchantId")
    @JsonPropertyDescription("Sub Merchant Identification Number of Merchant ")
    @NotNull
    private Integer subMerchantId;
    /**
     * Needs to send Merchant category code (MCC code). [Default MCC-5411] 
     * (Required)
     * 
     */
    @JsonProperty("terminalId")
    @JsonPropertyDescription("Needs to send Merchant category code (MCC code). [Default MCC-5411] ")
    @NotNull
    private Integer terminalId;
    /**
     * Name of the Merchant
     * (Required)
     * 
     */
    @JsonProperty("merchantName")
    @JsonPropertyDescription("Name of the Merchant")
    @NotNull
    private String merchantName;
    /**
     * Sub Merchant Name of the Merchant
     * (Required)
     * 
     */
    @JsonProperty("subMerchantName")
    @JsonPropertyDescription("Sub Merchant Name of the Merchant")
    @NotNull
    private String subMerchantName;
    /**
     * Alias name with which the payer can be identified by his registered entity
     * (Required)
     * 
     */
    @JsonProperty("payerVa")
    @JsonPropertyDescription("Alias name with which the payer can be identified by his registered entity")
    @Pattern(regexp = "^[a-zA-Z0-9{}/]+$")
    @NotNull
    private String payerVa;
    /**
     * Amount to be debited.(In Rupees, Integer value with 2 decimal) E.g. : 200.00 / 300.12
     * (Required)
     * 
     */
    @JsonProperty("amount")
    @JsonPropertyDescription("Amount to be debited.(In Rupees, Integer value with 2 decimal) E.g. : 200.00 / 300.12")
    @Pattern(regexp = "-?^\\d*(.\\d{0,2})?$")
    @NotNull
    private String amount;
    /**
     * Remarks entered by the payer for his reference. 
     * (Required)
     * 
     */
    @JsonProperty("note")
    @JsonPropertyDescription("Remarks entered by the payer for his reference. ")
    @Pattern(regexp = "^[a-zA-Z0-9{}/]+$")
    @NotNull
    private String note;
    /**
     * Format : dd/mm/yyyy HH:MM AM/PM 
     * (Required)
     * 
     */
    @JsonProperty("executionDate")
    @JsonPropertyDescription("Format : dd/mm/yyyy HH:MM AM/PM ")
    @NotNull
    private String executionDate;
    /**
     * Execution Sequence Number 
     * (Required)
     * 
     */
    @JsonProperty("mandateSeqNo")
    @JsonPropertyDescription("Execution Sequence Number ")
    @NotNull
    private Double mandateSeqNo;
    /**
     * This will be a Unique Transaction ID generated by the Merchant. 
     * (Required)
     * (Required)
     * 
     */
    @JsonProperty("merchantTranId")
    @JsonPropertyDescription("This will be a Unique Transaction ID generated by the Merchant. ")
    @Pattern(regexp = "^[a-zA-Z0-9{}/]+$")
    @NotNull
    @NotNull
    private String merchantTranId;
    /**
     * Fixed Value = UMN 
     * (Required)
     * 
     */
    @JsonProperty("key")
    @JsonPropertyDescription("Fixed Value = UMN ")
    @Pattern(regexp = "^[a-zA-Z0-9{}/]+$")
    @NotNull
    private String key;
    /**
     * UMN number to be passed
     * (Required)
     * 
     */
    @JsonProperty("value")
    @JsonPropertyDescription("UMN number to be passed")
    @Pattern(regexp = "^(.+)@(.+)$")
    @NotNull
    private String value;
    @JsonIgnore
    @Valid
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * Merchant Identification Number
     * (Required)
     * 
     */
    @JsonProperty("merchantId")
    public Integer getMerchantId() {
        return merchantId;
    }

    /**
     * Merchant Identification Number
     * (Required)
     * 
     */
    @JsonProperty("merchantId")
    public void setMerchantId(Integer merchantId) {
        this.merchantId = merchantId;
    }

    /**
     * Sub Merchant Identification Number of Merchant 
     * (Required)
     * 
     */
    @JsonProperty("subMerchantId")
    public Integer getSubMerchantId() {
        return subMerchantId;
    }

    /**
     * Sub Merchant Identification Number of Merchant 
     * (Required)
     * 
     */
    @JsonProperty("subMerchantId")
    public void setSubMerchantId(Integer subMerchantId) {
        this.subMerchantId = subMerchantId;
    }

    /**
     * Needs to send Merchant category code (MCC code). [Default MCC-5411] 
     * (Required)
     * 
     */
    @JsonProperty("terminalId")
    public Integer getTerminalId() {
        return terminalId;
    }

    /**
     * Needs to send Merchant category code (MCC code). [Default MCC-5411] 
     * (Required)
     * 
     */
    @JsonProperty("terminalId")
    public void setTerminalId(Integer terminalId) {
        this.terminalId = terminalId;
    }

    /**
     * Name of the Merchant
     * (Required)
     * 
     */
    @JsonProperty("merchantName")
    public String getMerchantName() {
        return merchantName;
    }

    /**
     * Name of the Merchant
     * (Required)
     * 
     */
    @JsonProperty("merchantName")
    public void setMerchantName(String merchantName) {
        this.merchantName = merchantName;
    }

    /**
     * Sub Merchant Name of the Merchant
     * (Required)
     * 
     */
    @JsonProperty("subMerchantName")
    public String getSubMerchantName() {
        return subMerchantName;
    }

    /**
     * Sub Merchant Name of the Merchant
     * (Required)
     * 
     */
    @JsonProperty("subMerchantName")
    public void setSubMerchantName(String subMerchantName) {
        this.subMerchantName = subMerchantName;
    }

    /**
     * Alias name with which the payer can be identified by his registered entity
     * (Required)
     * 
     */
    @JsonProperty("payerVa")
    public String getPayerVa() {
        return payerVa;
    }

    /**
     * Alias name with which the payer can be identified by his registered entity
     * (Required)
     * 
     */
    @JsonProperty("payerVa")
    public void setPayerVa(String payerVa) {
        this.payerVa = payerVa;
    }

    /**
     * Amount to be debited.(In Rupees, Integer value with 2 decimal) E.g. : 200.00 / 300.12
     * (Required)
     * 
     */
    @JsonProperty("amount")
    public String getAmount() {
        return amount;
    }

    /**
     * Amount to be debited.(In Rupees, Integer value with 2 decimal) E.g. : 200.00 / 300.12
     * (Required)
     * 
     */
    @JsonProperty("amount")
    public void setAmount(String amount) {
        this.amount = amount;
    }

    /**
     * Remarks entered by the payer for his reference. 
     * (Required)
     * 
     */
    @JsonProperty("note")
    public String getNote() {
        return note;
    }

    /**
     * Remarks entered by the payer for his reference. 
     * (Required)
     * 
     */
    @JsonProperty("note")
    public void setNote(String note) {
        this.note = note;
    }

    /**
     * Format : dd/mm/yyyy HH:MM AM/PM 
     * (Required)
     * 
     */
    @JsonProperty("executionDate")
    public String getExecutionDate() {
        return executionDate;
    }

    /**
     * Format : dd/mm/yyyy HH:MM AM/PM 
     * (Required)
     * 
     */
    @JsonProperty("executionDate")
    public void setExecutionDate(String executionDate) {
        this.executionDate = executionDate;
    }

    /**
     * Execution Sequence Number 
     * (Required)
     * 
     */
    @JsonProperty("mandateSeqNo")
    public Double getMandateSeqNo() {
        return mandateSeqNo;
    }

    /**
     * Execution Sequence Number 
     * (Required)
     * 
     */
    @JsonProperty("mandateSeqNo")
    public void setMandateSeqNo(Double mandateSeqNo) {
        this.mandateSeqNo = mandateSeqNo;
    }

    /**
     * This will be a Unique Transaction ID generated by the Merchant. 
     * (Required)
     * 
     */
    @JsonProperty("merchantTranId")
    public String getMerchantTranId() {
        return merchantTranId;
    }

    /**
     * This will be a Unique Transaction ID generated by the Merchant. 
     * (Required)
     * 
     */
    @JsonProperty("merchantTranId")
    public void setMerchantTranId(String merchantTranId) {
        this.merchantTranId = merchantTranId;
    }

    /**
     * Fixed Value = UMN 
     * (Required)
     * 
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * Fixed Value = UMN 
     * (Required)
     * 
     */
    @JsonProperty("key")
    public void setKey(String key) {
        this.key = key;
    }

    /**
     * UMN number to be passed
     * (Required)
     * 
     */
    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    /**
     * UMN number to be passed
     * (Required)
     * 
     */
    @JsonProperty("value")
    public void setValue(String value) {
        this.value = value;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(MandateNotificationApi.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("merchantId");
        sb.append('=');
        sb.append(((this.merchantId == null)?"<null>":this.merchantId));
        sb.append(',');
        sb.append("subMerchantId");
        sb.append('=');
        sb.append(((this.subMerchantId == null)?"<null>":this.subMerchantId));
        sb.append(',');
        sb.append("terminalId");
        sb.append('=');
        sb.append(((this.terminalId == null)?"<null>":this.terminalId));
        sb.append(',');
        sb.append("merchantName");
        sb.append('=');
        sb.append(((this.merchantName == null)?"<null>":this.merchantName));
        sb.append(',');
        sb.append("subMerchantName");
        sb.append('=');
        sb.append(((this.subMerchantName == null)?"<null>":this.subMerchantName));
        sb.append(',');
        sb.append("payerVa");
        sb.append('=');
        sb.append(((this.payerVa == null)?"<null>":this.payerVa));
        sb.append(',');
        sb.append("amount");
        sb.append('=');
        sb.append(((this.amount == null)?"<null>":this.amount));
        sb.append(',');
        sb.append("note");
        sb.append('=');
        sb.append(((this.note == null)?"<null>":this.note));
        sb.append(',');
        sb.append("executionDate");
        sb.append('=');
        sb.append(((this.executionDate == null)?"<null>":this.executionDate));
        sb.append(',');
        sb.append("mandateSeqNo");
        sb.append('=');
        sb.append(((this.mandateSeqNo == null)?"<null>":this.mandateSeqNo));
        sb.append(',');
        sb.append("merchantTranId");
        sb.append('=');
        sb.append(((this.merchantTranId == null)?"<null>":this.merchantTranId));
        sb.append(',');
        sb.append("key");
        sb.append('=');
        sb.append(((this.key == null)?"<null>":this.key));
        sb.append(',');
        sb.append("value");
        sb.append('=');
        sb.append(((this.value == null)?"<null>":this.value));
        sb.append(',');
        sb.append("additionalProperties");
        sb.append('=');
        sb.append(((this.additionalProperties == null)?"<null>":this.additionalProperties));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result* 31)+((this.note == null)? 0 :this.note.hashCode()));
        result = ((result* 31)+((this.subMerchantId == null)? 0 :this.subMerchantId.hashCode()));
        result = ((result* 31)+((this.amount == null)? 0 :this.amount.hashCode()));
        result = ((result* 31)+((this.executionDate == null)? 0 :this.executionDate.hashCode()));
        result = ((result* 31)+((this.terminalId == null)? 0 :this.terminalId.hashCode()));
        result = ((result* 31)+((this.mandateSeqNo == null)? 0 :this.mandateSeqNo.hashCode()));
        result = ((result* 31)+((this.subMerchantName == null)? 0 :this.subMerchantName.hashCode()));
        result = ((result* 31)+((this.merchantName == null)? 0 :this.merchantName.hashCode()));
        result = ((result* 31)+((this.merchantId == null)? 0 :this.merchantId.hashCode()));
        result = ((result* 31)+((this.payerVa == null)? 0 :this.payerVa.hashCode()));
        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));
        result = ((result* 31)+((this.value == null)? 0 :this.value.hashCode()));
        result = ((result* 31)+((this.merchantTranId == null)? 0 :this.merchantTranId.hashCode()));
        result = ((result* 31)+((this.key == null)? 0 :this.key.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof MandateNotificationApi) == false) {
            return false;
        }
        MandateNotificationApi rhs = ((MandateNotificationApi) other);
        return (((((((((((((((this.note == rhs.note)||((this.note!= null)&&this.note.equals(rhs.note)))&&((this.subMerchantId == rhs.subMerchantId)||((this.subMerchantId!= null)&&this.subMerchantId.equals(rhs.subMerchantId))))&&((this.amount == rhs.amount)||((this.amount!= null)&&this.amount.equals(rhs.amount))))&&((this.executionDate == rhs.executionDate)||((this.executionDate!= null)&&this.executionDate.equals(rhs.executionDate))))&&((this.terminalId == rhs.terminalId)||((this.terminalId!= null)&&this.terminalId.equals(rhs.terminalId))))&&((this.mandateSeqNo == rhs.mandateSeqNo)||((this.mandateSeqNo!= null)&&this.mandateSeqNo.equals(rhs.mandateSeqNo))))&&((this.subMerchantName == rhs.subMerchantName)||((this.subMerchantName!= null)&&this.subMerchantName.equals(rhs.subMerchantName))))&&((this.merchantName == rhs.merchantName)||((this.merchantName!= null)&&this.merchantName.equals(rhs.merchantName))))&&((this.merchantId == rhs.merchantId)||((this.merchantId!= null)&&this.merchantId.equals(rhs.merchantId))))&&((this.payerVa == rhs.payerVa)||((this.payerVa!= null)&&this.payerVa.equals(rhs.payerVa))))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))))&&((this.value == rhs.value)||((this.value!= null)&&this.value.equals(rhs.value))))&&((this.merchantTranId == rhs.merchantTranId)||((this.merchantTranId!= null)&&this.merchantTranId.equals(rhs.merchantTranId))))&&((this.key == rhs.key)||((this.key!= null)&&this.key.equals(rhs.key))));
    }

}
